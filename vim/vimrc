"Plugins (vim-plug)
call plug#begin('~/.vim/bundle')
Plug 'flazz/vim-colorschemes'       "Colorschemes
Plug 'itchyny/lightline.vim'        "Status bar
Plug 'hail2u/vim-css3-syntax'       "CSS3 Syntax
Plug 'tpope/vim-commentary'         "Comments! (gcc to toggle comment)
Plug 'terryma/vim-multiple-cursors' "Multiple cursors
call plug#end()

"Syntax Highlighting
syntax enable
set background=dark
colorscheme solarized

"Whitespace
set expandtab     "Soft tabs
set smarttab
set softtabstop=2
set tabstop=2
set shiftwidth=2

"Set whitespace based on filetype
autocmd Filetype python setlocal ts=4 sw=4 sts=0 expandtab "4 space soft tabs in python
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0 "8 space hard tabs in Makefiles

"Indentation
set autoindent                  "Auto Indentation
set smartindent
filetype plugin indent on       "Turn on filetype detection

"Editor Appearance
set number        "Line numbers
set showmode      "Show current mode down the bottom
set laststatus=2  "Show statusline
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ }
"autocmd vimenter * NERDTree  "Automatically enter NERDTree

"Under the Hood
set encoding=utf-8  "Change default encoding to utf-8
set autoread        "Reload files changed outside vim
set hidden          "http://items.sjbach.com/319/configuring-vim-right
set secure          "Disable unsafe commands in project .vimrc files
autocmd BufEnter * silent! lcd %:p:h  "Automatically change working directory to current file
autocmd BufNewFile,BufRead *.md set filetype=markdown "Set *.md files to filetype markdown

"Source ~/.bashrc in :sh
set shell=bash\ --login

"Long Lines
set nowrap
set sidescroll=1

"Wrap lines in Markdown files (.md)
autocmd Filetype markdown setlocal wrap sidescroll=0 linebreak

"Enable Mouse
set mouse=a

"jk for Esc
inoremap jk <Esc>

"Remap j, k (arrows) to move based on screen lines
"This makes editing wrapped text more intuitive
noremap j gj
noremap k gk

"Ctrl+s to save
noremap <silent> <C-S> :update<CR>
vnoremap <silent> <C-S> <C-C>:update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>

"U for redo
noremap U <C-R>

"Delete with x without overwriting yank register
"(Cut with d)
nnoremap x "_x
vnoremap x "_x

"Set <leader> to ,
let mapleader = ","

"Map [[ and ]] to { and } (move paragraph)
nnoremap [[ {
vnoremap [[ }
nnoremap ]] }
vnoremap ]] }

"Map tg to move back a vim tab page
nnoremap tg :tabprevious<CR>

"Ctrl-J, K, L, H to change split
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

":CDC to locally cd into directory of current file
command CDC lcd %:p:h<CR>:pwd<CR>

"Strip trailing whitespaces on save
"https://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

"Auto turn on/off paste mode to preserve indentation on paste
"https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

"Auto reload .vimrc
"http://www.bestofvim.com/tip/auto-reload-your-vimrc/
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }
